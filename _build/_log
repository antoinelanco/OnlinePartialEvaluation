### Starting build.
# Target: Main.ml.depends, tags: { extension:ml, file:Main.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules Main.ml > Main.ml.depends
# Target: CleanFunction.ml.depends, tags: { extension:ml, file:CleanFunction.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules CleanFunction.ml > CleanFunction.ml.depends
# Target: SourceAst.ml.depends, tags: { extension:ml, file:SourceAst.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules SourceAst.ml > SourceAst.ml.depends
# Target: SourceAst.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:SourceAst.cmo, file:SourceAst.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w -40 -o SourceAst.cmo SourceAst.ml
# Target: Interpreter4.ml.depends, tags: { extension:ml, file:Interpreter4.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules Interpreter4.ml > Interpreter4.ml.depends
# Target: Lexer.mll, tags: { extension:mll, file:Lexer.mll, lexer, ocaml, ocamllex, quiet }
/home/dxter/.opam/4.06.1/bin/ocamllex.opt -q Lexer.mll
# Target: Lexer.ml.depends, tags: { extension:ml, file:Lexer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules Lexer.ml > Lexer.ml.depends
# Target: Parser.mly.depends, tags: { extension:mly, file:Parser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' Parser.mly > Parser.mly.depends
# Target: Parser.mly, tags: { byte, compile, extension:ml, extension:mly, file:Parser.ml, file:Parser.mly, infer, menhir, ocaml, parser, quiet }
menhir --ocamlc 'ocamlfind ocamlc -w -40' --infer Parser.mly
# Target: Parser.mli.depends, tags: { extension:mli, file:Parser.mli, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules Parser.mli > Parser.mli.depends
# Target: Parser.cmi, tags: { byte, compile, extension:mli, file:Parser.mli, interf, ocaml, quiet }
ocamlfind ocamlc -c -w -40 -o Parser.cmi Parser.mli
# Target: Printer.ml.depends, tags: { extension:ml, file:Printer.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules Printer.ml > Printer.ml.depends
# Target: CleanFunction.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:CleanFunction.cmo, file:CleanFunction.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w -40 -o CleanFunction.cmo CleanFunction.ml
# Target: Interpreter4.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:Interpreter4.cmo, file:Interpreter4.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w -40 -o Interpreter4.cmo Interpreter4.ml
# Target: Lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:Lexer.cmo, file:Lexer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w -40 -o Lexer.cmo Lexer.ml
# Target: Printer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:Printer.cmo, file:Printer.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w -40 -o Printer.cmo Printer.ml
# Target: Main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:Main.cmo, file:Main.ml, implem, ocaml, quiet }
ocamlfind ocamlc -c -w -40 -o Main.cmo Main.ml
# Target: SourceAst.cmx, tags: { compile, extension:cmx, extension:ml, file:SourceAst.cmx, file:SourceAst.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w -40 -o SourceAst.cmx SourceAst.ml
# Target: Parser.ml.depends, tags: { extension:ml, file:Parser.ml, ocaml, ocamldep, quiet }
ocamlfind ocamldep -modules Parser.ml > Parser.ml.depends
# Target: Parser.cmx, tags: { compile, extension:cmx, extension:ml, file:Parser.cmx, file:Parser.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w -40 -o Parser.cmx Parser.ml
# Target: CleanFunction.cmx, tags: { compile, extension:cmx, extension:ml, file:CleanFunction.cmx, file:CleanFunction.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w -40 -o CleanFunction.cmx CleanFunction.ml
# Target: Interpreter4.cmx, tags: { compile, extension:cmx, extension:ml, file:Interpreter4.cmx, file:Interpreter4.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w -40 -o Interpreter4.cmx Interpreter4.ml
# Target: Lexer.cmx, tags: { compile, extension:cmx, extension:ml, file:Lexer.cmx, file:Lexer.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w -40 -o Lexer.cmx Lexer.ml
# Target: Printer.cmx, tags: { compile, extension:cmx, extension:ml, file:Printer.cmx, file:Printer.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w -40 -o Printer.cmx Printer.ml
# Target: Main.cmx, tags: { compile, extension:cmx, extension:ml, file:Main.cmx, file:Main.ml, implem, native, ocaml, quiet }
ocamlfind ocamlopt -c -w -40 -o Main.cmx Main.ml
# Target: Main.native, tags: { dont_link_with, extension:native, file:Main.native, link, native, ocaml, program, quiet }
ocamlfind ocamlopt -linkpkg SourceAst.cmx CleanFunction.cmx Interpreter4.cmx Parser.cmx Lexer.cmx Printer.cmx Main.cmx -o Main.native
# Compilation successful.
